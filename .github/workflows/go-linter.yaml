---
name: 🦫 Go Code Quality Checks

on:
  workflow_dispatch:
    inputs:
      go_version:
        description: 'Go version to use'
        required: false
        default: '1.23'
        type: string
      golangci_lint_version:
        description: 'GolangCI-Lint version to use'
        required: false
        default: 'v1.64.5'
        type: string
  push:
    paths:
      - 'tests/**'
      - 'pipeline/infra/**'
      - '.golangci-pipeline.yml'
      - '.golangci-tests.yml'
      - 'go.mod'
      - 'go.sum'
  pull_request:
    types: [opened, edited, synchronize]
    paths:
      - 'tests/**'
      - 'pipeline/infra/**'
      - '.golangci-pipeline.yml'
      - '.golangci-tests.yml'
      - 'go.mod'
      - 'go.sum'

permissions:
  contents: read
  pull-requests: read

env:
  GO_VERSION: ${{ inputs.go_version || '1.23' }}
  GOLANGCI_LINT_VERSION: ${{ inputs.golangci_lint_version || 'v1.64.5' }}

jobs:
  go-lint-pipeline:
    name: 🚀 Go Lint Pipeline
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: 🔍 Validate GolangCI-Lint Configuration
        run: |
          echo "🔍 Validating golangci-lint configuration for pipeline..."
          golangci-lint config verify --config .golangci-pipeline.yml
          echo "✅ Configuration valid, proceeding with linting..."

      - name: 🎨 Go Format Check
        working-directory: pipeline/infra
        run: |
          echo "✨ Checking Go code formatting in pipeline..."
          gofmt_output=$(gofmt -l .)
          if [ -n "$gofmt_output" ]; then
            echo "❌ Formatting issues found in files:"
            echo "$gofmt_output"
            exit 1
          fi

      - name: 🕵️ Go Linter Pipeline
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          working-directory: pipeline/infra
          args: --config ../../.golangci-pipeline.yml --verbose
          skip-cache: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

  go-lint-tests:
    name: 🧪 Go Lint Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: 🧹 Go Mod Tidy
        working-directory: tests
        run: |
          echo "🔄 Tidying Go module dependencies..."
          go mod tidy
          git diff --exit-code || (echo "❌ go.mod/go.sum files were modified during tidy" && exit 1)

      - name: 🔍 Validate GolangCI-Lint Configuration
        run: |
          echo "🔍 Validating golangci-lint configuration for tests..."
          golangci-lint config verify --config .golangci-tests.yml
          echo "✅ Configuration valid, proceeding with linting..."

      - name: 🎨 Go Format Check
        working-directory: tests
        run: |
          echo "✨ Checking Go code formatting in tests..."
          gofmt_output=$(gofmt -l .)
          if [ -n "$gofmt_output" ]; then
            echo "❌ Formatting issues found in files:"
            echo "$gofmt_output"
            exit 1
          fi

      - name: 🕵️ Go Linter Tests
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          working-directory: tests
          args: --config ../.golangci-tests.yml --verbose
          skip-cache: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: 🏁 Quality Check Summary
    needs: [go-lint-pipeline, go-lint-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📊 Workflow Status
        run: |
          echo "🦫 Go Code Quality Checks Complete!"
          echo "🚀 Pipeline Lint: ${{ needs.go-lint-pipeline.result }}"
          echo "🧪 Tests Lint: ${{ needs.go-lint-tests.result }}"
          echo "🔍 Detailed results available in job logs."
          echo "🧹 Go Version: ${{ env.GO_VERSION }}"
          echo "🧹 Golangci-lint Version: ${{ env.GOLANGCI_LINT_VERSION }}"

          # Check pipeline lint result
          if [[ "${{ needs.go-lint-pipeline.result }}" != "success" ]]; then
            echo "❌ Pipeline linting failed"
            exit 1
          fi

          # Check tests lint result
          if [[ "${{ needs.go-lint-tests.result }}" != "success" ]]; then
            echo "❌ Tests linting failed"
            exit 1
          fi

          echo "✅ All Go code quality checks passed!"
