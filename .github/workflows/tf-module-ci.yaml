---
name: 🧩 TF Module-Specific CI

on:
  workflow_dispatch:
    inputs:
      module_name:
        description: 'Terraform module name to validate (mandatory)'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: read

env:
  TERRAFORM_VERSION: '1.10.0'
  TFLINT_VERSION: 'latest'
  TERRAFORM_DOCS_VERSION: 'latest'

jobs:
  ci-module:
    name: 🌐 Module Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🔧 Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: 🗂️ Cache TFLint Plugins
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: ${{ runner.os }}-tflint-${{ hashFiles('modules/${{ inputs.module_name }}/.tflint.hcl') }}

      - name: 🧰 Setup Terraform Docs
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: 🌿 Module Preparation
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "🔍 Validating module: ${{ inputs.module_name }}"
          echo "📂 Current directory: $(pwd)"

      - name: 🧹 Terraform Format Check
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "✨ Checking Terraform code formatting..."
          terraform fmt -check -recursive

      - name: 🔍 TFLint Validation
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "🕵️ Running TFLint for module: ${{ inputs.module_name }}"
          tflint --version
          tflint --init
          tflint -f compact
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: 📄 Terraform Docs Validation
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "📝 Checking required documentation files..."

          # Step 1: Verify README.md exists
          if [ ! -f README.md ]; then
            echo "❌ Missing README.md file in module: ${{ inputs.module_name }}"
            exit 1
          fi
          echo "✅ README.md found"

          # Step 2: Verify .terraform-docs.yml exists
          if [ ! -f .terraform-docs.yml ]; then
            echo "❌ Missing .terraform-docs.yml file in module: ${{ inputs.module_name }}"
            exit 1
          fi
          echo "✅ .terraform-docs.yml found"

          echo "✅ All required documentation files are present"

      - name: 🏗️ Terraform Initialization
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "🚀 Initializing Terraform module..."
          terraform init -backend=false

      - name: 🧪 Terraform Validation
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "🔬 Validating Terraform module configuration..."
          terraform validate

  ci-examples:
    name: 🌈 Example Validation
    needs: ci-module
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🔍 Discover Example Implementations
        id: discover-examples
        run: |
          # Find all directories under the example module directory
          EXAMPLES=$(find "examples/${{ inputs.module_name }}" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "examples=${EXAMPLES}" >> $GITHUB_OUTPUT
          echo "🌟 Discovered Examples: ${EXAMPLES}"

      - name: 🧪 Validate Example Implementations
        env:
          EXAMPLES: ${{ steps.discover-examples.outputs.examples }}
        run: |
          # Convert JSON array to bash array
          readarray -t EXAMPLE_ARRAY < <(echo '${{ steps.discover-examples.outputs.examples }}' | jq -r '.[]')

          # Validate each example
          for EXAMPLE in "${EXAMPLE_ARRAY[@]}"; do
            if [ -n "$EXAMPLE" ]; then
              echo "🔍 Validating example: $EXAMPLE"

              EXAMPLE_PATH="examples/${{ inputs.module_name }}/${EXAMPLE}"
              echo "📂 Validating directory: ${EXAMPLE_PATH}"

              # Change to example directory
              cd "${EXAMPLE_PATH}"

              # Terraform fmt check
              echo "✨ Checking Terraform formatting..."
              terraform fmt -check -recursive

              # Terraform init
              echo "🚀 Initializing Terraform example..."
              terraform init -backend=false

              # Terraform validate
              echo "🧪 Validating Terraform configuration..."
              terraform validate

              # Return to root
              cd - > /dev/null
            fi
          done

  ci-terratest:
    name: 🧪 Terratest Validation
    needs: [ci-module, ci-examples]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Go and Terraform
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: false

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🔍 Discover Test Directories
        id: discover-tests
        run: |
          # Discover unit and integration test directories
          UNIT_TEST_DIR="tests/modules/${{ inputs.module_name }}/unit"
          EXAMPLES_TEST_DIR="tests/modules/${{ inputs.module_name }}/examples"

          # Check and set test directory flags
          UNIT_TESTS_EXIST=false
          EXAMPLES_TESTS_EXIST=false

          if [ -d "$UNIT_TEST_DIR" ]; then
            UNIT_TESTS_EXIST=true
          fi

          if [ -d "$EXAMPLES_TEST_DIR" ]; then
            EXAMPLES_TESTS_EXIST=true
          fi

          echo "unit_tests_exist=${UNIT_TESTS_EXIST}" >> $GITHUB_OUTPUT
          echo "examples_tests_exist=${EXAMPLES_TESTS_EXIST}" >> $GITHUB_OUTPUT

          echo "🔬 Unit Tests Exist: ${UNIT_TESTS_EXIST}"
          echo "🔬 Examples Tests Exist: ${EXAMPLES_TESTS_EXIST}"

      - name: 🧪 Run Unit Tests (Readonly)
        if: steps.discover-tests.outputs.unit_tests_exist == 'true'
        working-directory: tests
        env:
          TF_PLUGIN_CACHE_DIR: ""
          TERRAFORM_PLUGIN_DIR: "/tmp/terraform-plugin-dir-unit"
        run: |
          echo "🚀 Running Readonly Unit Tests for module: ${{ inputs.module_name }}"
          echo "🔍 Current PATH: $PATH"
          echo "🔍 Terraform version:"
          terraform version
          echo "🔍 Which terraform:"
          which terraform

          # Create clean plugin directory
          mkdir -p "$TERRAFORM_PLUGIN_DIR"

          # Export to make it available to terratest subprocesses
          export TF_CLI_ARGS_init="-plugin-dir=$TERRAFORM_PLUGIN_DIR"

          # Clean up any existing provider cache in test directories
          find "./modules/${{ inputs.module_name }}" -name ".terraform" -type d -exec rm -rf {} \; 2>/dev/null || true
          find "./modules/${{ inputs.module_name }}" -name ".terraform.lock.hcl" -type f -delete 2>/dev/null || true

          # Ensure Go dependencies are up to date
          go mod tidy

          # Run tests with verbose output and additional logging
          # -count=1 ensures tests aren't cached
          go test -v -tags 'readonly,unit' -timeout 30m -count=1 -parallel 1 ./modules/${{ inputs.module_name }}/unit/... 2>&1 | tee test_output.log

          # Check test output for any errors
          if grep -q "FAIL" test_output.log; then
            echo "❌ Tests failed. See detailed output above."
            exit 1
          fi

      - name: 🧪 Run Unit Tests (Integration)
        if: steps.discover-tests.outputs.unit_tests_exist == 'true' && false
        # The "false" condition disables this step since integration tests usually require cloud credentials
        # Remove "false" condition when you want to run integration tests in CI
        working-directory: tests
        env:
          TF_PLUGIN_CACHE_DIR: ""
          TERRAFORM_PLUGIN_DIR: "/tmp/terraform-plugin-dir-unit-integration"
        run: |
          echo "🚀 Running Integration Unit Tests for module: ${{ inputs.module_name }}"

          # Create clean plugin directory
          mkdir -p "$TERRAFORM_PLUGIN_DIR"

          # Export to make it available to terratest subprocesses
          export TF_CLI_ARGS_init="-plugin-dir=$TERRAFORM_PLUGIN_DIR"

          # Clean up any existing provider cache in test directories
          find "./modules/${{ inputs.module_name }}" -name ".terraform" -type d -exec rm -rf {} \; 2>/dev/null || true
          find "./modules/${{ inputs.module_name }}" -name ".terraform.lock.hcl" -type f -delete 2>/dev/null || true

          # Ensure Go dependencies are up to date
          go mod tidy

          # Run tests with verbose output and additional logging
          go test -v -tags 'integration,unit' -timeout 30m -count=1 -parallel 1 ./modules/${{ inputs.module_name }}/unit/... 2>&1 | tee test_output_integration.log

          # Check test output for any errors
          if grep -q "FAIL" test_output_integration.log; then
            echo "❌ Integration tests failed. See detailed output above."
            exit 1
          fi

      - name: 🌐 Run Examples Tests (Readonly)
        if: steps.discover-tests.outputs.examples_tests_exist == 'true'
        working-directory: tests
        env:
          TF_PLUGIN_CACHE_DIR: ""
          TERRAFORM_PLUGIN_DIR: "/tmp/terraform-plugin-dir-examples"
        run: |
          echo "🚀 Running Readonly Examples Tests for module: ${{ inputs.module_name }}"

          # Create clean plugin directory
          mkdir -p "$TERRAFORM_PLUGIN_DIR"

          # Export to make it available to terratest subprocesses
          export TF_CLI_ARGS_init="-plugin-dir=$TERRAFORM_PLUGIN_DIR"

          # Clean up any existing provider cache in test directories
          find "./modules/${{ inputs.module_name }}" -name ".terraform" -type d -exec rm -rf {} \; 2>/dev/null || true
          find "./modules/${{ inputs.module_name }}" -name ".terraform.lock.hcl" -type f -delete 2>/dev/null || true

          go mod tidy

          # -count=1 ensures tests aren't cached
          # -parallel 1 runs tests sequentially to avoid provider conflicts
          go test -v -tags 'readonly,examples' -count=1 -parallel 1 ./modules/${{ inputs.module_name }}/examples/...

      - name: 🌐 Run Examples Tests (Integration)
        if: steps.discover-tests.outputs.examples_tests_exist == 'true' && false
        # The "false" condition disables this step since integration tests usually require cloud credentials
        # Remove "false" condition when you want to run integration tests in CI
        working-directory: tests
        env:
          TF_PLUGIN_CACHE_DIR: ""
          TERRAFORM_PLUGIN_DIR: "/tmp/terraform-plugin-dir-examples-integration"
        run: |
          echo "🚀 Running Integration Examples Tests for module: ${{ inputs.module_name }}"

          # Create clean plugin directory
          mkdir -p "$TERRAFORM_PLUGIN_DIR"

          # Export to make it available to terratest subprocesses
          export TF_CLI_ARGS_init="-plugin-dir=$TERRAFORM_PLUGIN_DIR"

          # Clean up any existing provider cache in test directories
          find "./modules/${{ inputs.module_name }}" -name ".terraform" -type d -exec rm -rf {} \; 2>/dev/null || true
          find "./modules/${{ inputs.module_name }}" -name ".terraform.lock.hcl" -type f -delete 2>/dev/null || true

          go mod tidy

          # -count=1 ensures tests aren't cached
          # -parallel 1 runs tests sequentially to avoid provider conflicts
          go test -v -tags 'integration,examples' -count=1 -parallel 1 ./modules/${{ inputs.module_name }}/examples/...

  summary:
    name: 🏁 Validation Summary
    needs: [ci-module, ci-examples, ci-terratest]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📊 Workflow Status
        run: |
          echo "🚀 Module-Specific Terraform CI Complete!"
          echo "✅ Module: ${{ inputs.module_name }}"
          echo "🔍 Detailed results available in job logs."

        # Conditional status check
        if: |
          needs.ci-module.result == 'success' &&
          needs.ci-examples.result == 'success' &&
          (needs.ci-terratest.result == 'success' ||
           needs.ci-terratest.result == 'skipped')
