---
name: 🧩 TF Module-Specific CI

on:
  workflow_dispatch:
    inputs:
      module_name:
        description: 'Terraform module name to validate (mandatory)'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: read

env:
  TERRAFORM_VERSION: '1.10.0'
  TFLINT_VERSION: 'latest'
  TERRAFORM_DOCS_VERSION: 'latest'
  GO_VERSION: '1.21'

jobs:
  ci-module:
    name: 🌐 Module Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🔧 Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: 🗂️ Cache TFLint Plugins
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: ${{ runner.os }}-tflint-${{ hashFiles('modules/${{ inputs.module_name }}/.tflint.hcl') }}

      - name: 🧰 Setup Terraform Docs
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: 🌿 Module Preparation
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "🔍 Validating module: ${{ inputs.module_name }}"
          echo "📂 Current directory: $(pwd)"

      - name: 🧹 Terraform Format Check
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "✨ Checking Terraform code formatting..."
          terraform fmt -check -recursive

      - name: 🔍 TFLint Validation
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "🕵️ Running TFLint for module: ${{ inputs.module_name }}"
          tflint --version
          tflint --init
          tflint -f compact
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: 📄 Terraform Docs Validation
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "📝 Checking required documentation files..."

          # Step 1: Verify README.md exists
          if [ ! -f README.md ]; then
            echo "❌ Missing README.md file in module: ${{ inputs.module_name }}"
            exit 1
          fi
          echo "✅ README.md found"

          # Step 2: Verify .terraform-docs.yml exists
          if [ ! -f .terraform-docs.yml ]; then
            echo "❌ Missing .terraform-docs.yml file in module: ${{ inputs.module_name }}"
            exit 1
          fi
          echo "✅ .terraform-docs.yml found"

          echo "✅ All required documentation files are present"

      - name: 🏗️ Terraform Initialization
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "🚀 Initializing Terraform module..."
          terraform init -backend=false

      - name: 🧪 Terraform Validation
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "🔬 Validating Terraform module configuration..."
          terraform validate

  discover-test-targets:
    name: 🔍 Discover Test Targets
    runs-on: ubuntu-latest
    outputs:
      examples: ${{ steps.find-examples.outputs.examples }}
      unit_tests_exist: ${{ steps.check-unit-tests.outputs.exists }}
      examples_tests_exist: ${{ steps.check-examples-tests.outputs.exists }}
    steps:
      - uses: actions/checkout@v4

      - name: 🔎 Find Example Implementations
        id: find-examples
        run: |
          # Find all directories under the example module directory
          EXAMPLES=$(find "examples/${{ inputs.module_name }}" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "examples=${EXAMPLES}" >> $GITHUB_OUTPUT
          echo "🌟 Discovered Examples: ${EXAMPLES}"

      - name: 🔎 Check for Unit Tests
        id: check-unit-tests
        run: |
          UNIT_TEST_DIR="tests/modules/${{ inputs.module_name }}/unit"
          if [ -d "$UNIT_TEST_DIR" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "🔬 Unit Tests Exist: true"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "🔬 Unit Tests Exist: false"
          fi

      - name: 🔎 Check for Examples Tests
        id: check-examples-tests
        run: |
          EXAMPLES_TEST_DIR="tests/modules/${{ inputs.module_name }}/examples"
          if [ -d "$EXAMPLES_TEST_DIR" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "🔬 Examples Tests Exist: true"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "🔬 Examples Tests Exist: false"
          fi

  ci-examples:
    name: 🌈 Example Validation - ${{ matrix.example }}
    needs: [ci-module, discover-test-targets]
    runs-on: ubuntu-latest
    if: ${{ needs.discover-test-targets.outputs.examples != '[]' && needs.discover-test-targets.outputs.examples != '' }}
    strategy:
      fail-fast: false
      matrix:
        example: ${{ fromJson(needs.discover-test-targets.outputs.examples) }}
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🧪 Validate Example - ${{ matrix.example }}
        run: |
          echo "🔍 Validating example: ${{ matrix.example }}"

          EXAMPLE_PATH="examples/${{ inputs.module_name }}/${{ matrix.example }}"
          echo "📂 Validating directory: ${EXAMPLE_PATH}"

          # Change to example directory
          cd "${EXAMPLE_PATH}"

          # Terraform fmt check
          echo "✨ Checking Terraform formatting..."
          terraform fmt -check -recursive

          # Terraform init
          echo "🚀 Initializing Terraform example..."
          terraform init -backend=false

          # Terraform validate
          echo "🧪 Validating Terraform configuration..."
          terraform validate

  ci-terratest-unit-readonly:
    name: 🧪 Unit Tests (Readonly)
    needs: [ci-module, discover-test-targets]
    runs-on: ubuntu-latest
    if: ${{ needs.discover-test-targets.outputs.unit_tests_exist == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🧪 Run Unit Tests (Readonly)
        working-directory: tests
        run: |
          echo "🚀 Running Readonly Unit Tests for module: ${{ inputs.module_name }}"

          # Clean up any existing state before running
          find modules/${{ inputs.module_name }} -name ".terraform" -type d -exec rm -rf {} \; 2>/dev/null || true
          find modules/${{ inputs.module_name }} -name ".terraform.lock.hcl" -type f -delete 2>/dev/null || true

          # Ensure Go modules are up to date
          go mod tidy

          # Run the tests (without -parallel flag to avoid concurrency issues)
          go test -v -tags 'readonly,unit' -count=1 ./modules/${{ inputs.module_name }}/unit/...

  ci-terratest-examples-readonly:
    name: 🧪 Examples Tests (Readonly)
    needs: [ci-module, discover-test-targets]
    runs-on: ubuntu-latest
    if: ${{ needs.discover-test-targets.outputs.examples_tests_exist == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🧪 Run Examples Tests (Readonly)
        working-directory: tests
        run: |
          echo "🚀 Running Readonly Examples Tests for module: ${{ inputs.module_name }}"

          # Clean up any existing state before running
          find modules/${{ inputs.module_name }} -name ".terraform" -type d -exec rm -rf {} \; 2>/dev/null || true
          find modules/${{ inputs.module_name }} -name ".terraform.lock.hcl" -type f -delete 2>/dev/null || true

          # Find all terraform example directories and clean them
          cd ..
          find examples/${{ inputs.module_name }} -name ".terraform" -type d -exec rm -rf {} \; 2>/dev/null || true
          find examples/${{ inputs.module_name }} -name ".terraform.lock.hcl" -type f -delete 2>/dev/null || true
          cd tests

          # Ensure Go modules are up to date
          go mod tidy

          # Run the tests (without -parallel flag to avoid concurrency issues)
          go test -v -tags 'readonly,examples' -count=1 ./modules/${{ inputs.module_name }}/examples/...

  ci-terratest-unit-integration:
    name: 🧪 Unit Tests (Integration)
    needs: [ci-module, discover-test-targets]
    runs-on: ubuntu-latest
    # Integration tests are disabled by default (set to 'false') because they require cloud credentials
    # When enabled, we check if unit tests exist
    if: ${{ false && needs.discover-test-targets.outputs.unit_tests_exist == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🧪 Run Unit Tests (Integration)
        working-directory: tests
        run: |
          echo "🚀 Running Integration Unit Tests for module: ${{ inputs.module_name }}"

          # Clean up any existing state before running
          find modules/${{ inputs.module_name }} -name ".terraform" -type d -exec rm -rf {} \; 2>/dev/null || true
          find modules/${{ inputs.module_name }} -name ".terraform.lock.hcl" -type f -delete 2>/dev/null || true

          # Ensure Go modules are up to date
          go mod tidy

          # Run the tests (without -parallel flag to avoid concurrency issues)
          go test -v -tags 'integration,unit' -count=1 ./modules/${{ inputs.module_name }}/unit/...

  ci-terratest-examples-integration:
    name: 🧪 Examples Tests (Integration)
    needs: [ci-module, discover-test-targets]
    runs-on: ubuntu-latest
    # Integration tests are disabled by default (set to 'false') because they require cloud credentials
    # When enabled, we check if examples tests exist
    if: ${{ false && needs.discover-test-targets.outputs.examples_tests_exist == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🧪 Run Examples Tests (Integration)
        working-directory: tests
        run: |
          echo "🚀 Running Integration Examples Tests for module: ${{ inputs.module_name }}"

          # Clean up any existing state before running
          find modules/${{ inputs.module_name }} -name ".terraform" -type d -exec rm -rf {} \; 2>/dev/null || true
          find modules/${{ inputs.module_name }} -name ".terraform.lock.hcl" -type f -delete 2>/dev/null || true

          # Find all terraform example directories and clean them
          cd ..
          find examples/${{ inputs.module_name }} -name ".terraform" -type d -exec rm -rf {} \; 2>/dev/null || true
          find examples/${{ inputs.module_name }} -name ".terraform.lock.hcl" -type f -delete 2>/dev/null || true
          cd tests

          # Ensure Go modules are up to date
          go mod tidy

          # Run the tests (without -parallel flag to avoid concurrency issues)
          go test -v -tags 'integration,examples' -count=1 ./modules/${{ inputs.module_name }}/examples/...

  summary:
    name: 🏁 Validation Summary
    needs:
      - ci-module
      - ci-examples
      - ci-terratest-unit-readonly
      - ci-terratest-examples-readonly
      - ci-terratest-unit-integration
      - ci-terratest-examples-integration
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📊 Workflow Status
        run: |
          echo "🚀 Module-Specific Terraform CI Complete!"
          echo "✅ Module: ${{ inputs.module_name }}"
          echo "🔍 Detailed results available in job logs."

          # Check the status of all jobs
          if [[ "${{ needs.ci-module.result }}" != "success" ]]; then
            echo "❌ Module validation failed"
            exit 1
          fi

          # ci-examples may be skipped if there are no examples
          if [[ "${{ needs.ci-examples.result }}" != "success" && "${{ needs.ci-examples.result }}" != "skipped" ]]; then
            echo "❌ Examples validation failed"
            exit 1
          fi

          # Unit tests (readonly) may be skipped if there are no unit tests
          if [[ "${{ needs.ci-terratest-unit-readonly.result }}" != "success" && "${{ needs.ci-terratest-unit-readonly.result }}" != "skipped" ]]; then
            echo "❌ Unit tests (readonly) failed"
            exit 1
          fi

          # Examples tests (readonly) may be skipped if there are no examples tests
          if [[ "${{ needs.ci-terratest-examples-readonly.result }}" != "success" && "${{ needs.ci-terratest-examples-readonly.result }}" != "skipped" ]]; then
            echo "❌ Examples tests (readonly) failed"
            exit 1
          fi

          # Integration tests are disabled by default, so they should be skipped
          if [[ "${{ needs.ci-terratest-unit-integration.result }}" != "success" && "${{ needs.ci-terratest-unit-integration.result }}" != "skipped" ]]; then
            echo "❌ Unit tests (integration) failed"
            exit 1
          fi

          # Integration tests are disabled by default, so they should be skipped
          if [[ "${{ needs.ci-terratest-examples-integration.result }}" != "success" && "${{ needs.ci-terratest-examples-integration.result }}" != "skipped" ]]; then
            echo "❌ Examples tests (integration) failed"
            exit 1
          fi

          echo "✅ All checks passed!"
