---
name: 🧩 TF Dagger Pipeline

on:
  workflow_dispatch:
    inputs:
      tf_module_name:
        description: 'Terraform module name to run the dagger functions on. Modules are under the modules/ directory.'
        required: true
        default: 'default'
        type: string
      dagger_version:
        description: 'Dagger version to use'
        required: false
        default: '0.18.8'
        type: string

permissions:
  contents: read
  pull-requests: read

env:
  TERRAFORM_VERSION: '1.12.0'
  TFLINT_VERSION: 'latest'
  TERRAFORM_DOCS_VERSION: 'latest'
  GO_VERSION: '1.21'
  DAGGER_VERSION: ${{ inputs.dagger_version || '0.18.8' }}
  DAGGER_MODULE_DIR: "pipeline/infra"

jobs:
  is-tf-module:
    name: 🔍 Check if Terraform Module Exists
    runs-on: ubuntu-latest
    outputs:
      is_module: ${{ steps.check_module.outputs.is_module }}
    steps:
      - uses: actions/checkout@v4

      - name: 🔍 Check if module exists and has .tf files
        id: check_module
        run: |
          MODULE_PATH="modules/${{ inputs.tf_module_name }}"

          echo "🔍 Checking module path: $MODULE_PATH"

          # Check if directory exists
          if [ ! -d "$MODULE_PATH" ]; then
            echo "❌ Module directory does not exist: $MODULE_PATH"
            echo "is_module=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check if directory is not empty
          if [ -z "$(ls -A $MODULE_PATH)" ]; then
            echo "❌ Module directory is empty: $MODULE_PATH"
            echo "is_module=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check if directory contains at least one .tf file
          if [ -z "$(find $MODULE_PATH -maxdepth 1 -name "*.tf" -type f)" ]; then
            echo "❌ Module directory does not contain any .tf files: $MODULE_PATH"
            echo "is_module=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "✅ Valid Terraform module found at: $MODULE_PATH"
          echo "📁 Module contains the following .tf files:"
          find $MODULE_PATH -maxdepth 1 -name "*.tf" -type f -exec basename {} \;
          echo "is_module=true" >> $GITHUB_OUTPUT

  module-convention-check:
    name: 🧩 Module Convention Check
    runs-on: ubuntu-latest
    needs: is-tf-module
    if: needs.is-tf-module.outputs.is_module == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Dagger CLI
        run: |
          curl -fsSL https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=${{ env.DAGGER_VERSION }} BIN_DIR=$HOME/.local/bin sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: 🔧 Verify Dagger Installation
        run: |
          dagger version
          echo "✅ Dagger CLI installed successfully"

      - name: 🔍 File Verification Check
        working-directory: ${{ env.DAGGER_MODULE_DIR }}
        run: |
          echo "🔍 Running file verification for module: ${{ inputs.tf_module_name }}"
          dagger --use-hashicorp-image=true call action-terraform-file-verification-exec \
            --tf-module-path="${{ inputs.tf_module_name }}" \
            --no-cache
          echo "✅ File verification completed successfully"

      - name: 🔄 Version Compatibility Check
        working-directory: ${{ env.DAGGER_MODULE_DIR }}
        run: |
          echo "🔄 Running version compatibility verification for module: ${{ inputs.tf_module_name }}"
          dagger --use-hashicorp-image=true call action-terraform-version-compatibility-verification-exec \
            --tf-module-path="${{ inputs.tf_module_name }}" \
            --no-cache
          echo "✅ Version compatibility verification completed successfully"

  static-analysis:
    name: 🔬 Static Analysis
    runs-on: ubuntu-latest
    needs: is-tf-module
    if: needs.is-tf-module.outputs.is_module == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Dagger CLI
        run: |
          curl -fsSL https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=${{ env.DAGGER_VERSION }} BIN_DIR=$HOME/.local/bin sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: 🔧 Verify Dagger Installation
        run: |
          dagger version
          echo "✅ Dagger CLI installed successfully"

      - name: 🔬 Static Analysis Check
        working-directory: ${{ env.DAGGER_MODULE_DIR }}
        run: |
          echo "🔬 Running static analysis for module: ${{ inputs.tf_module_name }}"
          dagger --use-hashicorp-image=true call action-terraform-static-analysis-exec \
            --tf-module-path="${{ inputs.tf_module_name }}" \
            --no-cache
          echo "✅ Static analysis completed successfully"

  module-docs-verification:
    name: 📚 Module Documentation Verification
    runs-on: ubuntu-latest
    needs: is-tf-module
    if: needs.is-tf-module.outputs.is_module == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Dagger CLI
        run: |
          curl -fsSL https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=${{ env.DAGGER_VERSION }} BIN_DIR=$HOME/.local/bin sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: 🔧 Verify Dagger Installation
        run: |
          dagger version
          echo "✅ Dagger CLI installed successfully"

      - name: 📚 Documentation Generation Check
        working-directory: ${{ env.DAGGER_MODULE_DIR }}
        run: |
          echo "📚 Running documentation generation for module: ${{ inputs.tf_module_name }}"
          dagger --use-hashicorp-image=true call action-terraform-docs-exec \
            --tf-module-path="${{ inputs.tf_module_name }}" \
            --no-cache
          echo "✅ Documentation generation completed successfully"

  module-lint:
    name: 🧹 Module Linting
    runs-on: ubuntu-latest
    needs: [module-docs-verification, static-analysis]
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Dagger CLI
        run: |
          curl -fsSL https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=${{ env.DAGGER_VERSION }} BIN_DIR=$HOME/.local/bin sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: 🔧 Verify Dagger Installation
        run: |
          dagger version
          echo "✅ Dagger CLI installed successfully"

      - name: 🧹 Linting Check
        working-directory: ${{ env.DAGGER_MODULE_DIR }}
        run: |
          echo "🧹 Running linting for module: ${{ inputs.tf_module_name }}"
          dagger --use-hashicorp-image=true call action-terraform-lint-exec \
            --tf-module-path="${{ inputs.tf_module_name }}" \
            --no-cache
          echo "✅ Linting completed successfully"

  module-versions-compatibility-check:
    name: 🔄 Module Versions Compatibility Check
    runs-on: ubuntu-latest
    needs: module-lint
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Dagger CLI
        run: |
          curl -fsSL https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=${{ env.DAGGER_VERSION }} BIN_DIR=$HOME/.local/bin sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: 🔧 Verify Dagger Installation
        run: |
          dagger version
          echo "✅ Dagger CLI installed successfully"

      - name: 🔄 File Verification Check
        working-directory: ${{ env.DAGGER_MODULE_DIR }}
        run: |
          echo "🔄 Running file verification for module: ${{ inputs.tf_module_name }}"
          dagger --use-hashicorp-image=true call action-terraform-file-verification-exec \
            --tf-module-path="${{ inputs.tf_module_name }}" \
            --no-cache
          echo "✅ File verification completed successfully"

  module-build:
    name: 🏗️ Module Build
    runs-on: ubuntu-latest
    needs: module-versions-compatibility-check
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Dagger CLI
        run: |
          curl -fsSL https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=${{ env.DAGGER_VERSION }} BIN_DIR=$HOME/.local/bin sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: 🔧 Verify Dagger Installation
        run: |
          dagger version
          echo "✅ Dagger CLI installed successfully"

      - name: 🏗️ Build Check
        working-directory: ${{ env.DAGGER_MODULE_DIR }}
        run: |
          echo "🏗️ Running build for module: ${{ inputs.tf_module_name }}"
          dagger --use-hashicorp-image=true call action-terraform-build-exec \
            --tf-module-path="${{ inputs.tf_module_name }}" \
            --no-cache
          echo "✅ Build completed successfully"

  summary:
    name: 🏁 Validation Summary
    needs:
      - is-tf-module
      - module-convention-check
      - static-analysis
      - module-docs-verification
      - module-lint
      - module-versions-compatibility-check
      - module-build
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📊 Workflow Status
        run: |
          echo "🚀 Module-Specific Terraform CI Complete!"
          echo "✅ Module: ${{ inputs.tf_module_name }}"
          echo "🔍 Detailed results available in job logs."

          # Check the status of all jobs
          if [[ "${{ needs.is-tf-module.result }}" != "success" ]]; then
            echo "❌ Module existence check failed"
            exit 1
          fi

          if [[ "${{ needs.module-convention-check.result }}" != "success" ]]; then
            echo "❌ Module convention check failed"
            exit 1
          fi

          if [[ "${{ needs.static-analysis.result }}" != "success" ]]; then
            echo "❌ Static analysis failed"
            exit 1
          fi

          if [[ "${{ needs.module-docs-verification.result }}" != "success" ]]; then
            echo "❌ Module documentation verification failed"
            exit 1
          fi

          if [[ "${{ needs.module-lint.result }}" != "success" ]]; then
            echo "❌ Module linting failed"
            exit 1
          fi

          if [[ "${{ needs.module-versions-compatibility-check.result }}" != "success" ]]; then
            echo "❌ Module versions compatibility check failed"
            exit 1
          fi

          if [[ "${{ needs.module-build.result }}" != "success" ]]; then
            echo "❌ Module build failed"
            exit 1
          fi

          echo "✅ All checks passed!"
