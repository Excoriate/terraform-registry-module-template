---
name: Terraform CI Plan Recipes

on:
    workflow_dispatch:
    push:
    pull_request:
        types: [opened, edited, synchronize]

env:
    TF_ROOT: examples

jobs:
    set_up_recipes_job:
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}

        steps:
            - uses: actions/checkout@v4

            - name: Set up recipes matrix
              id: set-matrix
              run: |
                  RECIPES=$(find ${{ env.TF_ROOT }} -mindepth 2 -maxdepth 2 -type d -printf '%P\n')
                  RECIPES_JSON=$(echo "$RECIPES" | jq -R -s -c 'split("\n")[:-1]')
                  echo "::set-output name=matrix::${RECIPES_JSON}"

    terraform_recipes_ci:
        needs: set_up_recipes_job
        runs-on: ubuntu-latest
        strategy:
            matrix:
                recipe: ${{fromJson(needs.set_up_recipes_job.outputs.matrix)}}

        steps:
            - uses: actions/checkout@v4

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3

            - name: Terraform Init
              run: |
                  cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                  terraform init

                  # The remaining steps should be updated in the same way, with:
                  # cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}

            - name: Terraform Fmt
              run: |
                  cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                  terraform fmt -check -recursive

            - name: Terraform Validate
              run: |
                  cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                  terraform validate

            - name: Validate Terraform docs file
              run: |
                  cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                  if [ -f .terraform-docs.yml ]; then
                    echo "terraform-docs configuration file found"
                    cat .terraform-docs.yml
                  else
                    echo "Error: .terraform-docs.yml file not found in ${{ matrix.recipe }}"
                    exit 1
                  fi

            - name: Validate TFLint file
              run: |
                  cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                    if [ -f .tflint.hcl ]; then
                      echo "TFLint configuration file found"
                      cat .tflint.hcl
                    else
                      echo "Error: .tflint.hcl file not found in ${{ matrix.recipe }}"
                      exit 1
                    fi

            - name: Check for README.md file
              run: |
                  cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                    if [ -f README.md ]; then
                      echo "README.md file found"
                    else
                      echo "Error: README.md file not found in ${{ matrix.recipe }}"
                      exit 1
                    fi

            - name: Terraform TFLintSetup
              uses: terraform-linters/setup-tflint@v1
              with:
                  tflint_version: latest

            - name: TFLint Run
              run: |
                  cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                    tflint --version
                    tflint --init
                    tflint --disable-rule=terraform_module_pinned_source
                    tflint

    terraform_plan_varfiles:
        needs: set_up_recipes_job
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                recipe: ${{fromJson(needs.set_up_recipes_job.outputs.matrix)}}
        steps:
            - uses: actions/checkout@v4

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3

            - name: Terraform Init and Validate for each recipe
              run: |
                  cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                  terraform init
                  terraform validate

            - name: Find .tfvars and Plan
              id: tfvar-and-plan
              run: |
                  PLANS=""
                  TFVARS_PATH="${{ env.TF_ROOT }}/${{ matrix.recipe }}/config"
                  for TFVARS_FILE in $(find "$TFVARS_PATH" -name '*.tfvars'); do
                    cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                    PLAN_OUTPUT=$(terraform plan -var-file="$TFVARS_FILE" -no-color)
                    PLANS="${PLANS}Plan for ${TFVARS_FILE}:\n${PLAN_OUTPUT}\n\n"
                    cd -
                  done
                  echo "::set-output name=plans::${PLANS}"

            - name: Post Terraform Plan Output to PR
              if: github.event_name == 'pull_request' && steps.tfvar-and-plan.outputs.plans != ''
              uses: actions/github-script@v5
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const plans = ${{ steps.tfvar-and-plan.outputs.plans }};
                      const prNumber = ${{ github.event.pull_request.number }};
                      const body = `### Terraform Plan Outputs\n\`\`\`\n${plans}\n\`\`\``;
                      github.rest.issues.createComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: prNumber,
                        body: body
                      });
