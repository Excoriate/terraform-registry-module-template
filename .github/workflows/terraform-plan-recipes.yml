---
name: Terraform CI Plan Recipes

on:
    workflow_dispatch:
    push:
    pull_request:
        types: [opened, edited, synchronize]

env:
    TF_ROOT: examples

jobs:
    set_up_recipes_job:
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}

        steps:
            - uses: actions/checkout@v4

            - name: Set up recipes matrix
              id: set-matrix
              run: |
                  RECIPES=$(find ${{ env.TF_ROOT }} -mindepth 2 -maxdepth 2 -type d -printf '%P\n')
                  RECIPES_JSON=$(echo "$RECIPES" | jq -R -s -c 'split("\n")[:-1]')
                  echo "::set-output name=matrix::${RECIPES_JSON}"

    terraform_recipes_ci:
        needs: set_up_recipes_job
        runs-on: ubuntu-latest
        strategy:
            matrix:
                recipe: ${{fromJson(needs.set_up_recipes_job.outputs.matrix)}}

        steps:
            - uses: actions/checkout@v4

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3

            - name: Terraform Init
              run: |
                  cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                  terraform init

                  # The remaining steps should be updated in the same way, with:
                  # cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}

            - name: Terraform Fmt
              run: |
                  cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                  terraform fmt -check -recursive

            - name: Terraform Validate
              run: |
                  cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                  terraform validate

            - name: Validate Terraform docs file
              run: |
                  cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                  if [ -f .terraform-docs.yml ]; then
                    echo "terraform-docs configuration file found"
                    cat .terraform-docs.yml
                  else
                    echo "Error: .terraform-docs.yml file not found in ${{ matrix.recipe }}"
                    exit 1
                  fi

            - name: Validate TFLint file
              run: |
                  cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                    if [ -f .tflint.hcl ]; then
                      echo "TFLint configuration file found"
                      cat .tflint.hcl
                    else
                      echo "Error: .tflint.hcl file not found in ${{ matrix.recipe }}"
                      exit 1
                    fi

            - name: Check for README.md file
              run: |
                  cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                    if [ -f README.md ]; then
                      echo "README.md file found"
                    else
                      echo "Error: README.md file not found in ${{ matrix.recipe }}"
                      exit 1
                    fi

            - name: Terraform TFLintSetup
              uses: terraform-linters/setup-tflint@v1
              with:
                  tflint_version: latest

            - name: TFLint Run
              run: |
                  cd ${{ env.TF_ROOT }}/${{ matrix.recipe }}
                    tflint --version
                    tflint --init
                    tflint --disable-rule=terraform_module_pinned_source
                    tflint

    prepare_tfvars_matrix:
        needs: set_up_recipes_job
        runs-on: ubuntu-latest
        outputs:
            tfvars-matrix: ${{ steps.set-tfvars-matrix.outputs.matrix }}

        steps:
            - uses: actions/checkout@v4

            - name: Set up tfvars matrix
              id: set-tfvars-matrix
              run: |
                  TFVARS_MATRIX_JSON="[]"
                  RECIPES=${{fromJson(needs.set_up_recipes_job.outputs.matrix)}}
                  for RECIPE in ${RECIPES[@]}; do
                    TFVARS_FILES=$(find ${{ env.TF_ROOT }}/$RECIPE/config -name '*.tfvars' -printf '%P\n')
                    for TFVARS_FILE in $TFVARS_FILES; do
                      # Construct JSON array entry
                      ENTRY="{\"recipe\": \"$RECIPE\", \"tfvars_file\": \"$TFVARS_FILE\"}"
                      TFVARS_MATRIX_JSON=$(echo $TFVARS_MATRIX_JSON | jq --argjson entry "$ENTRY" '. + [$entry]')
                    done
                  done
                  echo "::set-output name=matrix::$TFVARS_MATRIX_JSON"

    terraform_plan:
        needs: prepare_tfvars_matrix
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                include: ${{fromJson(needs.prepare_tfvars_matrix.outputs.tfvars-matrix)}}

        steps:
            - uses: actions/checkout@v4

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3

            - name: Terraform Init
              run: terraform init
              working-directory: ${{ env.TF_ROOT }}/${{ matrix.include.recipe }}

            - name: Terraform Validate
              run: terraform validate
              working-directory: ${{ env.TF_ROOT }}/${{ matrix.include.recipe }}

            - name: Terraform Plan with tfvars
              run: terraform plan -var-file=config/${{ matrix.include.tfvars_file }}
              working-directory: ${{ env.TF_ROOT }}/${{ matrix.include.recipe }}
              id: terraform_plan

            - name: Post Terraform Plan Output to PR
              if: github.event_name == 'pull_request'
              uses: actions/github-script@v5
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const planOutput = `Terraform Plan Output for ${{ matrix.include.tfvars_file }}:\n${{ steps.terraform_plan.outputs.plan-output }}`;
                      const prNumber = ${{ github.event.pull_request.number }};
                      github.rest.issues.createComment({
                        issue_number: prNumber,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: planOutput
                      });
