# ============================================================================
# Terraform Environment Variables Configuration
# ============================================================================
# This file provides a comprehensive list of all Terraform environment variables
# validated against official HashiCorp documentation and AWS provider sources.
#
# Usage with Justfile:
# This project uses `set dotenv-load` in the Justfile, which automatically loads
# environment variables from .env files in the project root. Copy this file to
# .env and uncomment/modify values as needed.
#
# Variable Precedence (highest to lowest):
# 1. Command line options (terraform apply -var="key=value")
# 2. Environment variables (TF_VAR_* and others)
# 3. terraform.tfvars files
# 4. Variable defaults in configuration
# ============================================================================

# ============================================================================
# CORE TERRAFORM VARIABLES
# ============================================================================

# Logging and Debugging
# ----------------------------------------------------------------------------
# Enable detailed logs for debugging. Valid values: TRACE, DEBUG, INFO, WARN, ERROR, off
# TF_LOG=INFO

# Specify where logs should be written. TF_LOG must also be set.
# TF_LOG_PATH=./terraform.log

# Separate logging for Terraform core vs providers
# TF_LOG_CORE=DEBUG
# TF_LOG_PROVIDER=INFO

# Input and Automation
# ----------------------------------------------------------------------------
# Disable interactive prompts. Set to "false" or "0"
# TF_INPUT=false

# Adjust output for CI/automation environments (any non-empty value)
# TF_IN_AUTOMATION=1

# Workspace Management
# ----------------------------------------------------------------------------
# Select Terraform workspace (for multi-environment deployments)
# TF_WORKSPACE=development

# Data and Configuration Directories
# ----------------------------------------------------------------------------
# Override default .terraform directory location
# TF_DATA_DIR=/custom/terraform/data

# Specify custom CLI configuration file location
# TF_CLI_CONFIG_FILE=$HOME/.terraformrc-custom

# Plugin and Provider Configuration
# ----------------------------------------------------------------------------
# Cache directory for provider plugins
# TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache

# Allow plugin cache to potentially break dependency lock file
# TF_PLUGIN_CACHE_MAY_BREAK_DEPENDENCY_LOCK_FILE=true

# Registry Configuration
# ----------------------------------------------------------------------------
# Max retry attempts for registry requests
# TF_REGISTRY_DISCOVERY_RETRY=3

# Timeout for registry client requests (seconds)
# TF_REGISTRY_CLIENT_TIMEOUT=15

# State Management
# ----------------------------------------------------------------------------
# Interval for persisting state to remote backend (seconds, min 20)
# TF_STATE_PERSIST_INTERVAL=30

# CLI Arguments
# ----------------------------------------------------------------------------
# Global CLI arguments applied to all commands
# TF_CLI_ARGS=-parallelism=10

# Command-specific CLI arguments
# TF_CLI_ARGS_init=-upgrade
# TF_CLI_ARGS_plan=-refresh=false
# TF_CLI_ARGS_apply=-auto-approve=false

# ============================================================================
# HCP TERRAFORM / TERRAFORM CLOUD VARIABLES
# ============================================================================

# Organization and Project Settings
# ----------------------------------------------------------------------------
# HCP Terraform organization name
# TF_CLOUD_ORGANIZATION=my-organization

# HCP Terraform hostname (default: app.terraform.io)
# TF_CLOUD_HOSTNAME=app.terraform.io

# HCP Terraform project name
# TF_CLOUD_PROJECT=my-project

# Workspace Selection
# ----------------------------------------------------------------------------
# Single workspace name (alternative to defining in cloud block)
# TF_WORKSPACE=my-workspace

# HCP Terraform Specific
# ----------------------------------------------------------------------------
# Parallelism setting for HCP Terraform runs (1-256, default 10)
# TFE_PARALLELISM=10

# ============================================================================
# TERRAFORM INPUT VARIABLES (TF_VAR_*)
# ============================================================================
# Environment variables prefixed with TF_VAR_ become Terraform input variables
# Example: TF_VAR_region becomes var.region in your configuration

# Common Infrastructure Variables
# ----------------------------------------------------------------------------
# TF_VAR_region=us-west-2
# TF_VAR_environment=development
# TF_VAR_project_name=my-terraform-project
# TF_VAR_instance_type=t3.medium
# TF_VAR_instance_count=3
# TF_VAR_enable_monitoring=true

# Complex Variable Examples
# ----------------------------------------------------------------------------
# Lists: TF_VAR_availability_zones='["us-west-2a", "us-west-2b"]'
# Maps: TF_VAR_tags='{"Environment": "dev", "Owner": "team-platform"}'
# Booleans: TF_VAR_enable_monitoring=true
# Numbers: TF_VAR_instance_count=3

# ============================================================================
# AWS PROVIDER ENVIRONMENT VARIABLES
# ============================================================================

# ðŸš¨ CRITICAL CONFIGURATION - REQUIRED FOR AWS_PROFILE TO WORK
# ----------------------------------------------------------------------------
# This is poorly documented but essential for profile support in Terraform
AWS_SDK_LOAD_CONFIG=1

# Core AWS Credentials
# ----------------------------------------------------------------------------
# AWS Access Key ID
# AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE

# AWS Secret Access Key
# AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

# Session token for temporary credentials
# AWS_SESSION_TOKEN=your-session-token

# Region Configuration
# ----------------------------------------------------------------------------
# Default AWS region
# AWS_DEFAULT_REGION=us-west-2

# AWS region (alternative to AWS_DEFAULT_REGION)
# AWS_REGION=us-west-2

# Profile and Credential File Configuration
# ----------------------------------------------------------------------------
# AWS profile name (RECOMMENDED approach)
# AWS_PROFILE=default

# Custom credentials file location
# AWS_SHARED_CREDENTIALS_FILE=$HOME/.aws/credentials

# Custom config file location
# AWS_CONFIG_FILE=$HOME/.aws/config

# Account and Endpoint Configuration
# ----------------------------------------------------------------------------
# AWS account ID for account-based endpoints
# AWS_ACCOUNT_ID=123456789012

# Account-based endpoint mode: preferred, disabled, required
# AWS_ACCOUNT_ID_ENDPOINT_MODE=preferred

# Global endpoint for all AWS services
# AWS_ENDPOINT_URL=https://custom-endpoint.example.com

# Service-specific endpoints (replace <SERVICE> with service name)
# AWS_ENDPOINT_URL_S3=https://s3.custom-endpoint.com
# AWS_ENDPOINT_URL_EC2=https://ec2.custom-endpoint.com
# AWS_ENDPOINT_URL_DYNAMODB=https://dynamodb.custom-endpoint.com

# Ignore all custom endpoint configurations
# AWS_IGNORE_CONFIGURED_ENDPOINT_URLS=false

# Security and Compliance Configuration
# ----------------------------------------------------------------------------
# Custom CA bundle for HTTPS certificate validation
# AWS_CA_BUNDLE=/path/to/ca-bundle.pem

# Use dual-stack endpoints (IPv4 and IPv6)
# AWS_USE_DUALSTACK_ENDPOINT=false

# Use FIPS-compliant endpoints
# AWS_USE_FIPS_ENDPOINT=false

# Advanced AWS Configuration
# ----------------------------------------------------------------------------
# Maximum retry attempts
# AWS_MAX_ATTEMPTS=3

# Retry mode: legacy, standard, adaptive
# AWS_RETRY_MODE=standard

# Request checksum calculation: when_supported, when_required
# AWS_REQUEST_CHECKSUM_CALCULATION=when_supported

# Response checksum validation: when_supported, when_required
# AWS_RESPONSE_CHECKSUM_VALIDATION=when_supported

# Application ID for tracking (max 50 characters)
# AWS_SDK_UA_APP_ID=my-terraform-app

# EC2 Instance Metadata Configuration
# ----------------------------------------------------------------------------
# Disable EC2 instance metadata service
# AWS_EC2_METADATA_DISABLED=false

# Number of attempts to retrieve metadata
# AWS_METADATA_SERVICE_NUM_ATTEMPTS=1

# Metadata service timeout (seconds)
# AWS_METADATA_SERVICE_TIMEOUT=1

# STS Configuration
# ----------------------------------------------------------------------------
# STS endpoint usage: legacy, regional
# AWS_STS_REGIONAL_ENDPOINTS=regional

# Web Identity and Role Configuration
# ----------------------------------------------------------------------------
# Role ARN for web identity assumption
# AWS_ROLE_ARN=arn:aws:iam::123456789012:role/WebIdentityRole

# Session name for assumed role
# AWS_ROLE_SESSION_NAME=terraform-session

# Web identity token file path
# AWS_WEB_IDENTITY_TOKEN_FILE=/path/to/token

# Signature Configuration
# ----------------------------------------------------------------------------
# SigV4a signing regions (comma-delimited)
# AWS_SIGV4A_SIGNING_REGION_SET=us-east-1,us-west-2

# ============================================================================
# AZURE PROVIDER ENVIRONMENT VARIABLES
# ============================================================================

# Azure Authentication
# ----------------------------------------------------------------------------
# Azure subscription ID
# ARM_SUBSCRIPTION_ID=12345678-1234-9876-4563-123456789012

# Azure client ID (application ID)
# ARM_CLIENT_ID=12345678-1234-9876-4563-123456789012

# Azure client secret
# ARM_CLIENT_SECRET=your-client-secret

# Azure tenant ID
# ARM_TENANT_ID=12345678-1234-9876-4563-123456789012

# Azure Environment (Public, UsGovernment, German, China)
# ARM_ENVIRONMENT=Public

# Alternative Authentication Methods
# ARM_USE_MSI=false
# ARM_USE_CLI=true
# ARM_USE_OIDC=false
# ARM_OIDC_TOKEN=your-oidc-token

# ============================================================================
# GOOGLE CLOUD PROVIDER ENVIRONMENT VARIABLES
# ============================================================================

# Google Cloud Authentication
# ----------------------------------------------------------------------------
# Path to service account key file
# GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json

# Google Cloud project ID
# GOOGLE_PROJECT=my-gcp-project

# Google Cloud region
# GOOGLE_REGION=us-central1

# Google Cloud zone
# GOOGLE_ZONE=us-central1-a

# Impersonation
# GOOGLE_IMPERSONATE_SERVICE_ACCOUNT=service-account@project.iam.gserviceaccount.com

# ============================================================================
# KUBERNETES PROVIDER ENVIRONMENT VARIABLES
# ============================================================================

# Kubernetes Configuration
# ----------------------------------------------------------------------------
# Path to kubeconfig file
# KUBE_CONFIG_PATH=$HOME/.kube/config

# Kubernetes context
# KUBE_CTX=my-cluster-context

# Kubernetes namespace
# KUBE_NAMESPACE=default

# In-cluster configuration
# KUBE_IN_CLUSTER_CONFIG=false

# ============================================================================
# VAULT PROVIDER ENVIRONMENT VARIABLES
# ============================================================================

# Vault Configuration
# ----------------------------------------------------------------------------
# Vault server address
# VAULT_ADDR=https://vault.example.com:8200

# Vault authentication token
# VAULT_TOKEN=your-vault-token

# Vault namespace (Enterprise)
# VAULT_NAMESPACE=my-namespace

# TLS Configuration
# VAULT_CACERT=/path/to/ca.pem
# VAULT_CLIENT_CERT=/path/to/client.pem
# VAULT_CLIENT_KEY=/path/to/client-key.pem
# VAULT_SKIP_VERIFY=false

# ============================================================================
# CONSUL PROVIDER ENVIRONMENT VARIABLES
# ============================================================================

# Consul Configuration
# ----------------------------------------------------------------------------
# Consul address
# CONSUL_HTTP_ADDR=localhost:8500

# Consul datacenter
# CONSUL_DATACENTER=dc1

# Authentication
# CONSUL_HTTP_TOKEN=your-consul-token
# CONSUL_HTTP_AUTH=username:password

# TLS Configuration
# CONSUL_HTTP_SSL=true
# CONSUL_CACERT=/path/to/ca.pem
# CONSUL_CLIENT_CERT=/path/to/client.pem
# CONSUL_CLIENT_KEY=/path/to/client-key.pem

# ============================================================================
# CI/CD SPECIFIC VARIABLES
# ============================================================================

# GitHub Actions
# ----------------------------------------------------------------------------
# GITHUB_TOKEN=ghp_xxxxxxxxxxxxxxxxxxxx
# GITHUB_WORKSPACE=/github/workspace

# GitLab CI
# ----------------------------------------------------------------------------
# CI_PROJECT_ID=12345
# CI_COMMIT_SHA=abcdef123456
# GITLAB_TOKEN=glpat-xxxxxxxxxxxxxxxxxxxx

# Jenkins
# ----------------------------------------------------------------------------
# BUILD_NUMBER=123
# JOB_NAME=terraform-pipeline
# WORKSPACE=/var/jenkins_home/workspace/job

# ============================================================================
# CUSTOM APPLICATION VARIABLES
# ============================================================================

# Project-Specific Variables
# ----------------------------------------------------------------------------
# Add your project-specific environment variables here
# CUSTOM_API_KEY=your-api-key
# CUSTOM_DATABASE_URL=postgresql://user:pass@localhost:5432/db
# CUSTOM_FEATURE_FLAG=enabled

# Team and Organization
# ----------------------------------------------------------------------------
# TEAM_NAME=platform-engineering
# COST_CENTER=engineering
# DEPARTMENT=technology

# ============================================================================
# NOTES AND BEST PRACTICES
# ============================================================================
#
# 1. Security:
#    - Never commit actual secrets to version control
#    - Use secret management systems for production
#    - Mark sensitive variables appropriately in Terraform
#
# 2. AWS Profile Configuration:
#    - AWS_SDK_LOAD_CONFIG=1 is REQUIRED for AWS_PROFILE to work
#    - This is a common source of authentication issues
#
# 3. Variable Precedence:
#    - Command line flags override environment variables
#    - TF_VAR_* variables override .tfvars files
#    - See official Terraform documentation for complete precedence
#
# 4. Justfile Integration:
#    - Variables in this file are automatically loaded via `set dotenv-load`
#    - Use `just --list` to see available commands
#    - Environment-specific .env files can override defaults
#
# 5. Testing:
#    - Use TF_LOG=DEBUG for troubleshooting
#    - Validate authentication with `terraform plan`
#    - Test variable precedence with simple configurations
#
# ============================================================================
